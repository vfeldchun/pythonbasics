#Реализовать программу работы с органическими клетками. Необходимо создать класс Клетка.
# В его конструкторе инициализировать параметр, соответствующий количеству клеток (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов: сложение (__add__()),
# вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()).
# Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение и
# обычное (не целочисленное) деление клеток, соответственно.
# В методе деления должно осуществляться округление значения до целого числа.
#Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
#Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток
# больше нуля, иначе выводить соответствующее сообщение.
#Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение количества
# ячеек этих двух клеток.
#Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление
# количества ячеек этих двух клеток.
#В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
# Данный метод позволяет организовать ячейки по рядам.
#Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно
# переданному аргументу. Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
#Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5.
# Тогда метод make_order() вернет строку: *****\n*****\n**.
#Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5.
# Тогда метод make_order() вернет строку: *****\n*****\n*****.
#Подсказка: подробный список операторов для перегрузки доступен по ссылке.
###################################################################################################################
"""
Клас Cell предназначен для создания обьектов клетка и выполнения над ними арефметических операций.
Длч каждой клетки обязательно определяеться количество входищих в клетку ячеек.
Длдя класса определены следующие атрибуты:
    cells_partitions - количество ячеек входящих в клетку, целое число
Для класа определены следующие методы:
    __init__(self, partition_number) - инициализирует обьект при его создании
    где:
        partition_number - передоваемое при создании количество ячеек клетки
    __add__(self, other) - формирует клетку с суммой ячеек двух обьектов клеток
    где:
        other - второй обьект класа Cell
    __sub__(self, other) - формирует клетку с разностью ячеек двух обьектов клетки
    где:
        other - второй обьект класа Cell
    __mul__(self, other) - формирует клетку с произведением ячеек двух обьектов клетки
    где:
        other - второй обьект класа Cell
    __truediv__(self, other) - - формирует клетку с результатм целочисленного деления ячеек двух обьектов клетки
    где:
        other - второй обьект класа Cell
    make_order(self, partitions_number_in_row) - возвращает отформатированую строку с заданым количеством ячеек в строке
    где:
        partitions_number_in_row - количество ячеек в строке
"""
class Cell:
    cells_partitions = 0 # Обьявляем атрибут класа содержащий количество ячеек клетки у обьекта

    def __init__(self, partition_number): # Обьявляем метод класа
        self.cells_partitions = partition_number # Инициализируем количество ячеек клетки обьекта

    def __add__(self, other): # Обьявляем метод класа
        return self.cells_partitions + other.cells_partitions # Возвращаем сумму ячеек двух клеток

    def __mul__(self, other): # Обьявляем метод класа
        return self.cells_partitions * other.cells_partitions # Возвращаем произведение ячеек двух клеток

    def __sub__(self, other): # Обьявляем метод класа
        if self.cells_partitions - other.cells_partitions > 0: # Если разность количеств клеток больше 0
            return self.cells_partitions - other.cells_partitions # Возвращаем разность ячеек двух клеток
        else: # если меньше 0
            # Выводим сообщение о не возможности выполнения операции
            return f'Вычитание двух клеток не может быть выполнено, так как\n' \
                   f'количество ячеек первой клетки меньше количества ячеек второй клетки!'

    def __truediv__(self, other): # Обьявляем метод класа
        if self.cells_partitions // other.cells_partitions == 0: #Если целочисленое деление ячеек равно 0
            # Выводим сообщение о бесмысленности операции
            return f'Количество ячеек общей клетки равно 0. Деление не имеет смысла!'
        else: # если больще 0
            return self.cells_partitions // other.cells_partitions # Возвращаем результат целочисленого деления ячеек

    def make_order(self, partitions_number_in_row): # Обьявляем метод класа
        return_str = '' # Инициализируем результирующую строку содержащую отформатированое изображение ячеек
        # Получаем еоличество строк ячеек и данные остатка для последней строки
        partition_rows, partition_last_row = divmod(self.cells_partitions, partitions_number_in_row)
        partition_row_str = '*' * partitions_number_in_row # создаем строку * соответствующую количеству ячеек обьекта
        partition_last_row_str = '*' * partition_last_row  # создаем последнюю строку * из остатка ячеек
        for item in range(0, partition_rows): # Для кажой строки ячеек с полным количеством *
            return_str += partition_row_str + '\n' # Формируем общую строку вывода
        # Возвращаем общую строку вывода плных строк + последнюю строку с неполным еоличеством ячеек,
        # если таковая будет или в противном случае ''
        return return_str + partition_last_row_str

###################################################################################################################
# Основное тело программы
###################################################################################################################
cell_1 = Cell(25) # Создаем обьект клетка с 25 ячейками
cell_2 = Cell(16) # Создаем обьект клетка с 16 ячейками

# Выводим результаты математических операция на обьектами когда количество ячейки
# первого обьекта больше количества ячеек второго обьекта
print(f'Произведение двух клеток. Получаем клетку с количеством ячеек: {cell_1 + cell_2}')
print(f'Вычитание двх клеток. Получаем клетку с количеством ячеек: {cell_1 - cell_2}')
print(f'Умножение двх клеток. Получаем клетку с количеством ячеек: {cell_1 * cell_2}')
print(f'Деление двух клеток. Получаем клетку с количеством ячеек: {cell_1 / cell_2}')

# Выводим результаты математических операция на обьектами когда количество ячейки
# первого обьекта меньше количества ячеек второго обьекта
print(f'\nВычитание двух клеток. Получаем клетку с количеством ячеек: {cell_2 - cell_1}')
print(f'Деление двух клеток. Получаем клетку с количеством ячеек: {cell_2 / cell_1}')

#Выводим отформатированые по строкам ячейки обьекта. Одной ячейке соответствует 1 символ *
# Передаем количество ячеек в строке = 4
print(f'\nВывод ячеек клетки рядами:\n{cell_1.make_order(4)}')

#Выводим отформатированые по строкам ячейки обьекта. Одной ячейке соответствует 1 символ *
# Передаем количество ячеек в строке = 7
print(f'\nВывод ячеек клетки рядами:\n{cell_1.make_order(7)}')