#Реализовать класс Matrix (матрица). Обеспечить перегрузку конструктора класса (метод __init__()),
# который должен принимать данные (список списков) для формирования матрицы.
#Подсказка: матрица — система некоторых математических величин, расположенных в виде прямоугольной схемы.
#Примеры матриц вы найдете в методичке.
#Следующий шаг — реализовать перегрузку метода __str__() для вывода матрицы в привычном виде.
#Далее реализовать перегрузку метода __add__() для реализации операции сложения двух
# объектов класса Matrix (двух матриц). Результатом сложения должна быть новая матрица.
#Подсказка: сложение элементов матриц выполнять поэлементно — первый элемент первой строки первой матрицы
# складываем с первым элементом первой строки второй матрицы и т.д.

"""
Клас Matrix предназначен для создания обьектов типа матрица из вложеного списка списков.
Для создания обьектов класса Matrix обязательным параметром являеться список списков целых чисел.
В классе определяються следующие атрибуты:
    my_matrix - список списков содержащий заданую матрицу обьекта класа
    __my_matrix_str - приватная строка содержащая отформатированоое представление матрицы в привычном виде.
    my_matrix_counter - глобальный счетчик обьектов класса
    __my_matrix_line - приватный список содержащий строку матрицы для выполнения операций сложения
    my_new_add_matrix - список списков содержащий сумму двух матриц
    __my_add_print - приватный флаг показывающий что сумма двух матриц была выполнена
В класе определены следующие методы:
    __init__(self, matrix_list) - Выполняет инициализацию атрибутов обьекта.
    где:
        matrix_list - список списков содержащий матрицу

    __str__(self) - Метод перегружающий вывод данный об обьекте класа. Формирует и возвращает отформатированую строку
    содержащую матрицу или результат сложения матриц в привычном виде.

    __add__(self, other) - метод перегружающий сложение матриц одинаковой размерности
    определеных для двух обьктов класса
"""
class Matrix:
    __my_matrix_str = '' # Инициализируем приватный аргумент обьекта содержащий отформотированую строку матрицы
    my_matrix_counter = 0 # Инициализируем глобальный счетчик обьектов класа
    __my_matrix_line = [] # Инициализируем приватный список содержащий строку матрицы обьекта класа
    my_new_add_matrix = [] # Инициализируем список списков содержащий сумму двух матриц класа
    __my_add_print = False # Инициализируем флаг операции сложений матриц

    def __init__(self, matrix_list): # Обьявляем метод класа
        self.my_matrix = matrix_list # Присваиваем списку спискоа обьекта, переданный список списков
        Matrix.my_matrix_counter += 1 # Увеличиваем глобальный счетчик обьектов класа на 1
        # Присваиваем собственному счетчику обьеков значение глобального счетчика обьектов
        self.my_matrix_counter = Matrix.my_matrix_counter
        self.__my_add_print = False # Присваиваем флагу сложения матриц значение по умолчанию

    def __str__(self): # Обьявляем метод класа
        self.__my_matrix_str = '' # Обнуляем значение строки содержащей  форматированое предстовление матрицы
        if self.__my_add_print == True: # Если нужно перегрузить вывод операции сложения
            for item in self.my_new_add_matrix: # Для каждого списка в списке списков результата сложения матриц
                for item2 in item: # для каждого элемента списка
                    # формируем строку матрицы где после каждого элемента списка добавляем табуляцию
                    self.__my_matrix_str = self.__my_matrix_str + str(item2) + '\t'
                # Продалжаем форматирование и после каждой строки матрицы добавляем перенос строки
                self.__my_matrix_str = self.__my_matrix_str + '\n'
            self.__my_add_print = False # Выулючаем флаг вывода резудьтат суммы двух матриц
            # Возвращаем отформатированную строку содержащую сумму двух матриц
            return f'Итоговая сумма двух матриц обьектов класса Matrix:\n{self.__my_matrix_str}'
        elif self.__my_add_print == False: # Если нужно перегрузить вывод обьекта класса в виде матоицы
            for item in self.my_matrix: # Для каждого списка, списка списков Матрицы обьекта
                for item2 in item: # Жля каждого элемента списка
                    # формируем строку матрицы где после каждого элемента списка добавляем табуляцию
                    self.__my_matrix_str = self.__my_matrix_str + str(item2) + '\t'
                # Продалжаем форматирование и после каждой строки матрицы добавляем перенос строки
                self.__my_matrix_str = self.__my_matrix_str + '\n'
            # Возвращаем отформатированную строку содержащую матрицу обьекта
            return f'Матрица обьекта {self.my_matrix_counter} класса Matrix:\n{self.__my_matrix_str}'

    def __add__(self, other): # Обьявляем метод класа
        self.row1 = [] # Инициализируем список содержащий список значений первой матрицы
        self.row2 = [] # Инициализируем список содержащий список значений второй матрицы
        # Если размерность матриц отличаеться
        if len(self.my_matrix) != len(other.my_matrix) or len(self.my_matrix[0]) != len(other.my_matrix[0]):
            print('Для выполнения сложений матриц они должны иметь одинаковую размерность!')
            return [] # Возвращаем пустой список
        self.my_new_add_matrix.clear() # Очищаем список списков содержащий результат сложения двух матриц
        for item in range(0, len(self.my_matrix)): # Для каждой строки матрицы
            self.row1 = self.my_matrix[item] # Берем список строки item первой матрицы
            self.row2 = other.my_matrix[item] # Берем список строки item второй матрицы
            for item2 in range(0, len(self.row1)): # Для каждого элемента списка строки матрицы
                # Выполняем последовательное сложение элементов двух матриц и добавляем результат в список строк
                self.__my_matrix_line.append(self.row1[item2] + self.row2[item2])
            # Добавляем копию полученной строки (списка) сумм элементов матриц в итоговую сумарную матрицу
            self.my_new_add_matrix.append(self.__my_matrix_line.copy())
            # Очищаем список содержащий сумму строки item для двух матриц
            self.__my_matrix_line.clear()
        self.__my_add_print = True # Включаем флаг сложения двух матриц
        return self # возвращаем обьект класа

##################################################################################################################
# Инициализируем список содержащий значения для первой матрицей
matrix_list = [[3 , 7, 8], [34, 23, 65], [52, 121, 43]]
# Инициализируем список содержащий значения для второй матрицей
matrix_list2 = [[12, 54, 31], [45, 77, 210], [77, 2, 33]] #

m1 = Matrix(matrix_list) # Создаем обьект класа для первой матрицы
m2 = Matrix(matrix_list2) # Создаем обьект класа для второй матрицы

print(m1) # Выводим отформатированую в привычное представление матрицу первого обьекта класа
print(m2) # Выводим отформатированую в привычное представление матрицу второго обьекта класа

print(m1 + m2) # Выводим результат сумирования двух матриц первого и второго обьекта
# Выводим матрицу содержащую сумму двух матриц в виде списка списков. Матрица будет храниться до следующего сложения
# или до явной очистки данного атрибута: m1.my_new_add_matrix.clear()
print(f'Сумма двух матриц равна:\n{m1.my_new_add_matrix}')



