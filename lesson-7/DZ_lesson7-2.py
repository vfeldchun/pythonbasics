#Реализовать проект расчета суммарного расхода ткани на производство одежды.
# Основная сущность (класс) этого проекта — одежда, которая может иметь определенное название.
# К типам одежды в этом проекте относятся пальто и костюм.
# У этих типов одежды существуют параметры: размер (для пальто) и рост (для костюма).
# Это могут быть обычные числа: V и H, соответственно.
#Для определения расхода ткани по каждому типу одежды использовать формулы: для пальто (V/6.5 + 0.5),
# для костюма (2 * H + 0.3). Проверить работу этих методов на реальных данных.
#Реализовать общий подсчет расхода ткани. Проверить на практике полученные на этом уроке знания:
# реализовать абстрактные классы для основных классов проекта, проверить на практике работу декоратора @property.

#################################################################################################################
from abc import ABC, abstractmethod # Импорт абстракного класа  ABC и абстрактного метода из модуля ABC

"""
Клас Clothes это абстракный клас родитель для любых класов потомков.
Данный клас определяет только обязательность наличия определения метода cloth_consumption_calc(self) в
класах потомках.
"""
class Clothes(ABC): # Обьявление абстракного класа

    @abstractmethod # Обьявдение абстактного метода
    def cloth_consumption_calc(self):
        pass

"""
Клас Coat. Предназначен для создания обьектов типа пальто. 
Клас являеться класом потомком абстрактного класа Cloathes.
Для класса поределены следующие аргументы:
    coat_size - размер пальто
Длдя класа определены следующие методы:
    __init__(self, size_number) - метод инициализации обьекта при создании 
        где:
            size_number - размер польто
    cloth_consumption_calc(self) - возвращает обьем материала необходимый для пошива пальто
"""
class Coat(Clothes):  # Обьявление класа потомка
    coat_size = 0 # Инициализация глобального атрибута содержащего размер пальто

    def __init__(self, size_number): # Определение метода инициализирующего обьект класса при его создании
        self.coat_size = size_number # Присваеваем размер пальто переданный при создании обьекта

    @property # Позваляем использовать метод класа как аргумент
    def cloth_consumption_calc(self): # Обьявляем метод класа
        return self.coat_size/6.5 + 0.5 # Возвращаем обьем материала необходимый на пальто переданого размера

"""
Клас Costume. Предназначен для создания обьектов типа костюм. 
Клас являеться класом потомком абстрактного класа Cloathes.
Для класса поределены следующие аргументы:
    costume_height - рост человека для пошива костюма
Длдя класа определены следующие методы:
    __init__(self, height_number) - метод инициализации обьекта при создании 
        где:
            height_number - рост человека переданный при создании обьекта
    cloth_consumption_calc(self) - возвращает обьем материала необходимый для пошива костюма
"""
class Costume(Clothes): # Обьявление класа потомка
    costume_height = 0 # Инициализируем глобальный атрибут содержащий рост клиента

    def __init__(self, height_number): # Определение метода инициализирующего обьект класса при его создании
        self.costume_height = height_number # Присваеваем рост клиента переданный при создании обьекта

    @property # Позваляем использовать метод класа как аргумент
    def cloth_consumption_calc(self): # Обьявляем метод класа
        return 2 * self.costume_height + 0.3 # Возвращаем обьем материала необходимый на кастюм переданого роста


##############################################################################################################

coat1 = Coat(50) # Создаем обьект класа Coat с размером 50
costume1 = Costume(1.86) # Создаем обьект класа Costume на рост 186 см

# Выводим количество материала необходимого на пошив пальто и костюма
print(f'На изготовление пальто уйдет: {round(coat1.cloth_consumption_calc, 2)} материала!')
print(f'На изготовление костюма уйдет: {round(costume1.cloth_consumption_calc, 2)} материала!')

# Выводим общий обьем материала необходимый для пошива костюма и пальто.
print(f'На изготовление пальто и костюма '
      f'уйдет: {round(coat1.cloth_consumption_calc + costume1.cloth_consumption_calc, 2)} материала!')

