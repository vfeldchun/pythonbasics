# Реализовать класс «Дата», функция-конструктор которого должна принимать дату в виде строки формата «день-месяц-год».
# В рамках класса реализовать два метода. Первый, с декоратором @classmethod, должен извлекать число, месяц, год
# и преобразовывать их тип к типу «Число». Второй, с декоратором @staticmethod, должен проводить валидацию числа,
# месяца и года (например, месяц — от 1 до 12). Проверить работу полученной структуры на реальных данных.
######################################################################################################################
"""
Клас Date предназначен для создания обьектов типа дата и выполнения над ними операций с помощью методов класа
Клас Date содержкит следующие аргументы:
    date_str - дата в строковом виде в формате «день-месяц-год»
Клас Date содержит следующие методы:
    __init__(self, classic_date) - метод для инициализации аргумента строки даты при создании обьекта
        где:
            classic_date - передоваемая дата в формате «день-месяц-год» при создании экземпляра класа
    convert_to_numbers(cls, str_date) - класовый метод для преобразовании строки даты в список целых чисел. Метод
    может быть вызван без создания обьектов класа.
        где:
            str_date - переменная содержащая строку даты в формате «день-месяц-год»
    validate_numbers(date_number_list) - статический метод предназначеный для валидирования правильности переданной
    даты на основе преобразованного в список чисел даты, формируемого классовым методом convert_to_numbers. Метод может
    быть вызван без создания обьекта класа.
        где:
            date_number_list - дата представленая в виде списка целых чисел
    validate_date(self) - метод выполняющий валидацию переданной даты для обьекта
"""
class Date: # Обьявляем клас
    date_str = '' #Обьявляем глобальную переменную содержащую строку даты

    def __init__(self, classic_date): # Обьявляем метод класа
        self.date_str = classic_date

    @classmethod # Декорируем метод как класовый
    def convert_to_numbers(cls, str_date): # Обьявляем метод класа
        date_number_list = [] # Инициализируем список содержащий дату в цифровом предстовлении
        date_list = str_date.split('-') # Получаем из строки даты, список строк
        for item in date_list: # Для кадой строки в списке строк
            date_number_list.append(int(item)) # приводим строку к целому типу и добавляем в спиок цифр даты
        return date_number_list # Возвращаем дату в виде списка цифр

    @staticmethod # Декорируем метод как статический
    def validate_numbers(date_number_list): # Обьявляем метод класа
        check_day = date_number_list[0] # Инициализируем переменную содержащую день из даты в виде цифры
        check_month = date_number_list[1] # Инициализируем переменную содержащую месяц из даты в виде цифры
        check_year = date_number_list[2] # Инициализируем переменную содержащую год из даты в виде цифры
        month_dict = {1: 'январь', 2: 'февраль', 3: 'март', 4: 'апрель', # Инициализируем словарь наименования месяцев
                      5: 'май', 6: 'июнь', 7: 'июль', 8: 'август',
                      9: 'сентябрь', 10: 'октябрь', 11: 'ноябрь', 12: 'декабрь'}
        month_30day_list = [4, 6, 9, 11] # Инициализируем список месяцев с 30 днями
        month_31day_list = [1, 3, 5, 7, 8, 10, 12] # Инициализируем список месяцев с 31 днем

        if check_month in range(1, 13): # Если цифра месяца входит в последовательность от 1 до 12
            month_name = month_dict[check_month] # присваиваем имя месяца
        else: # в противном случае
            month_name = str(check_month) # присваиваем номер месяца в строковом формате

        # Инициализируем строку не валидированого вывода
        invalidate_str = f'День {check_day} для месяца {month_name} ' \
                         f'{check_year} года не может быть валидирован!'
        # Инициализируем строку валидированого вывода
        validate_str = f'День {check_day} для месяца {month_name} ' \
                       f'{check_year} года валидирован!'

        # Если месяц есть в списке месяцев с 30 днями и день в диапазоне от 1 до 30 и год в диапазоне от 1 до 2021
        if check_month in month_30day_list and check_day in range(1, 31) and check_year in range(1, 2022):
            print(validate_str) # Выводим строку валидации
        # Если месяц февраль и день в диапазоне от 1 до 28 и год в диапазоне от 1 до 2021
        elif check_month == 2 and check_day in range(1, 29) and check_year in range(1, 2022):
            print(validate_str) # Выводим строку валидации
        # Если месяц есть в списке месяцев с 31 днем и день в диапазоне от 1 до 30 и год в диапазоне от 1 до 2021
        elif check_month in month_31day_list and check_day in range(1, 32) and check_year in range(1, 2022):
            print(validate_str) # Выводим строку валидации
        else: # Во всех остальных случаях
            print(invalidate_str) # Выводим строку отсутствия валидации даты

    def validate_date(self): # Обьявляем метод класа
        self.number_list = self.convert_to_numbers(self.date_str) # Преобразуем дату в список цифр
        self.validate_numbers(self.number_list) # Выплняем валидацию даты

###############################################################################################################
# Основное тело программы
###############################################################################################################

date_str = '12-02-2019' # Задаем дату в формате «день-месяц-год»
Date.validate_numbers(Date.convert_to_numbers(date_str)) # Выполняем валидацию без создания обьекта класа

# Задаем дату в формате «день-месяц-год» с днем выходящим за последовательность
date_str = '30-02-2017'
Date.validate_numbers(Date.convert_to_numbers(date_str)) # Выполняем валидацию без создания обьекта класа

# Задаем дату в формате «день-месяц-год» с месяцем выходящим за последовательность
date_str = '12-22-1973'
Date.validate_numbers(Date.convert_to_numbers(date_str)) # Выполняем валидацию без создания обьекта класа

# Задаем дату в формате «день-месяц-год» с днем выходящим за последовательность для данного месяца
date_str = '31-04-2024'
Date.validate_numbers(Date.convert_to_numbers(date_str)) # Выполняем валидацию без создания обьекта класа

d_1 = Date('25-08-812') # Инициализируем обьект класа
# Выполняем валидацию обьекта класа класовым и статическим методами
d_1.validate_numbers(d_1.convert_to_numbers(d_1.date_str))
# Выполняем валидацию обьекта класа обычным методом
d_1.validate_date()
