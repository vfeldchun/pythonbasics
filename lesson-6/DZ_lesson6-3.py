#Реализовать базовый класс Worker (работник), в котором определить атрибуты:
# name, surname, position (должность), income (доход).
# Последний атрибут должен быть защищенным и ссылаться на словарь, содержащий элементы:
# оклад и премия,
# например, {"wage": wage, "bonus": bonus}.
# Создать класс Position (должность) на базе класса Worker.
# В классе Position реализовать методы получения полного имени сотрудника (get_full_name) и дохода
# с учетом премии (get_total_income).
# Проверить работу примера на реальных данных
# (создать экземпляры класса Position, передать данные, проверить значения атрибутов, вызвать методы экземпляров).
##################################################################################################################
"""
Класс Worker предназначен для определения структуры следующих параметров для обьекта работник:
    где:
        worker_name - атрибут обьекта хранящий имя работника
        worker_surname - атрибут обьекта хранящий фамилию работника
        worker_position - атрибут обьекта хранящий должность работника
        _worker_income - атрибут обьекта в виде словаря зранящий значение оклада и примии работника
    метод: __init__(self, init_wage, init_bonus) выполняет
    первичную инициализацию глобального атрибута словаря класса.
        где:
            init_wage - Оклад сотрудника
            init_bonus - Премия сотрудника
    Атрибуты не обязательны так как имеют значения по умолчанию
"""
class Worker:
    worker_name = ''
    worker_surname = ''
    worker_position = ''
    _worker_income = {}
    """
    Функция инициализирует словарь хранящий оклад и премию сотрудника, по умолчанию 10000 и 500 рублей
    """
    def __init__(self, init_wage=10000, init_bonus=500):
        Worker._worker_income.update({'оклад': init_wage, 'премия': init_bonus})

    """
    Класс Position потомок класса Worker предназначен для хранения имени, фамилии и должности сотрудника 
    и предоставления данных о сотрудники и его совокупного дохода
        где Атрибуты - все атрибуты наследуються от класса Worker, за исключением _worker_income
        где методы:
            get_full_name(self) - Выводит ФИО сотрудеика на экран
            get_total_income(self) - Выводит общий доход сотрудника на экран
    """
class Position(Worker):
    def get_full_name(self): # Обьявление метода
        # Если отсутствуют имя или фамилия или должность
        if self.worker_name == '' or self.worker_surname == '' or self.worker_position == '':
            # Выводим нотификацию
            print('Вы не присвоили данные работника соответствующим атрибутам.\n '
                  'Введите сначала чледующие данные:\n'
                  'Имя работника в атрибут - worker_name\n'
                  'Фамилию работника в атрибут - worker_surname\n'
                  'Должность работника в атрибут - worker_position\n')
        else: # если имя, фамилия и должность определены
            print(f'ФИО сотрудника: {self.worker_name} {self.worker_surname}')

    def get_total_income(self): #Обьявление метода класса
        if super()._worker_income['оклад'] == 0: # Если оклад равен 0
            print("Вы не определили оклад сотрудника. Используцте функцию put_wage_bonus")
        else: # Если оклад сотрудника отличен от нуля
            # Расчитываем совокупный доход сотрудника использую значения из словаря дохода родителя
            worker_income = super()._worker_income['оклад'] + super()._worker_income['премия']
            print(f'Доход сотрудника {self.worker_name} {self.worker_surname} состовляет {worker_income} рублей\n')

##########################################################################################################
# Основное тело программы
##########################################################################################################

p_1 = Position() # Создаем обьект класса
# Задаем собственные атрибуты обьекта
p_1.worker_name, p_1.worker_surname, p_1.worker_position = 'Иван', 'Сидоров', 'инженер'
p_1.get_full_name() # Выводим ФИО сотрудника
print(f'Должность сотрудника: {p_1.worker_position}') # Выводим должность сотрудника
p_1.get_total_income() # Выводим общий доход сотрудника

# Сделал отсебятину так как таким образом удобнее менять оклад и премию
# меняем значение по умолчанию глобального атрибута словаря класа Worker
w_1 = Worker(35000, 15000)
# Используем тот же обьект класса Position. Можно создать новый обьект класса Position, но
# тогда нужно будет переопределять словарь Worker после создания обьекта Position иначе
# вызов __init__ родительского класса опять присвоит словарю значение по умолчанию

# Задаем собственные атрибуты обьекта
p_1.worker_name, p_1.worker_surname, p_1.worker_position = 'Казимир', 'Прохиндеев', 'мутный'
p_1.get_full_name() # Выводим ФИО сотрудника
print(f'Должность сотрудника: {p_1.worker_position}') # Выводим должность сотрудника
p_1.get_total_income() # Выводим общий доход сотрудника

