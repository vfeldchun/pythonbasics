#Необходимо создать (не программно) текстовый файл, где каждая строка описывает учебный предмет и наличие лекционных,
# практических и лабораторных занятий по этому предмету и их количество.
# Важно, чтобы для каждого предмета не обязательно были все типы занятий.
# Сформировать словарь, содержащий название предмета и общее количество занятий по нему. Вывести словарь на экран.
#Примеры строк файла:
#Информатика: 100(л) 50(пр) 20(лаб).
#Физика: 30(л) — 10(лаб)
#Физкультура: — 30(пр) —
#Пример словаря:
#{“Информатика”: 170, “Физика”: 40, “Физкультура”: 30}
#################################################################################################################
"""
Функция parse_words получает в виде списка наименование предмета, количество лекция, практики и лабараторных и
возвращает наименование предмета и сумму всех занятий
    parse_words(t_list)
    где:
        t_list - список содержащий предмет и типы занятий с количеством
    Возвращает subject_name, classes_num
    где:
        subject_name - Наименование предмета
        classes_num - Сумма всех типов занятий по предмету
"""
def parse_words(t_list):
    subject_name = t_list[0][:len(t_list[0])-1:] #Присваеваем наименование предмета без ":"
    classes_num = 0 # Инициализируем переменую содержащую сумму всех занятий по предмету

    if t_list[1] != '—': # Если есть лекции по предмету
        t_pos = t_list[1].find('(') #Определяем позицию следующую за цифрой количества лекций
        classes_num = classes_num + int(t_list[1][:t_pos:]) # Вырезаем цифру лекций и добавляем к сумме всех занятий
    if t_list[2] != '—': # Если есть практика по предменту
        t_pos = t_list[2].find('(') #Определяем позицию следующую за цифрой количества практики
        classes_num = classes_num + int(t_list[2][:t_pos:]) # Вырезаем цифру практики и добавляем к сумме всех занятий
    if t_list[3] != '—': # Если есть лабы по предменту
        t_pos = t_list[3].find('(') #Определяем позицию следующую за цифрой количества практики
        classes_num = classes_num + int(t_list[3][:t_pos:]) # Вырезаем цифру лаб и добавляем к сумме всех занятий
    return subject_name, classes_num # Возвращаем наименование предмета и общее количество занятий по предмету

#################################################################################################################
#Основное тело программы
#################################################################################################################

str_list = [] #Инициализируем список для строк файла lesson5-6.txt
subject_dict = {} #Инициализируем целевой словарь

print("Программа обработки ведости предметов и связанных с предметами занятий")

try:
    with open('lesson5-6.txt', 'r', encoding='utf-8') as f: # открываем исходный файл
        for line in f: #Для каждой строки в файле
            str_list.append(line) # Добавляем строку из файла в список
except FileNotFoundError: # если файл не найден
    print('Файл lesson5-6.txt не найден!')
finally:
    print(f"Импорт ведомости из файла {f.name} завершен!")

for item in str_list: # для кадой строки в списке
    tmp_words = item.split() # Формируем список из наименования и типов занятий
    # Вызываем функцию обраьотки списка и получаем наименование предмета и общее количество заятий
    t_subject, t_qty = parse_words(tmp_words)
    subject_dict.update({t_subject: t_qty}) # Добовляем в словарь наименование предмета и связанное кол-во занятий


print('Ведомость обработана и получень следующий словарь:\n', subject_dict) # Выводим полученый словарь
