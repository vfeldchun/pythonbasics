# Продолжить работу над вторым заданием. Реализуйте механизм валидации вводимых пользователем данных.
# Например, для указания количества принтеров, отправленных на склад, нельзя использовать строковый тип данных.
# Подсказка: постарайтесь по возможности реализовать в проекте «Склад оргтехники» максимум возможностей,
# изученных на уроках по ООП.

"""
Клас Store являеться базовым родительским классом для класса оргтехники OfficeEquipment
Клас имеет следующие атрибуты:
    store_name - наименование склада
    goods_qty - общее количество товаров на складе
Клас имеет следующие методы:
    return_on_stor_qty - возвращает общее количество товара на складе
"""
class Store: # Обьявляем клас
    store_name = 'Склад №15' # Инициализируем глобальную переменую имени склада
    goods_qty = 0 # Инициализируем глобальную переменую количества товара на складе

    def return_on_stor_qty(self): # Обьявляем метод класа
        return goods_qty # возвращаем количество товара на складе
"""
Клас OfficeEquipment являеться базовым родительским классом для класов Printers, Scaners, Copiers
Для класа определены следующие атрибуты:
    oe_name - Наименование оргтехники
    oe_model - Модель оргтехники
    oe_serial_number - Серийный номер оргтехники
    oe_warranty - Срок гарантийной поддержки оргтехники
    oe_type - Тип оргтехники (принтер, сканер, копир)
    oe_qty - Количество едеиниц оргтехники
    oe_date_in - дата приобретения и поступления на склад
    oe_price - закупочная стоимость
    oe_owner - подразделение владелец товара для передачи со склада
    oe_on_store - флаг наличия на складе
    oe_id - уникальный идентификатор складской позиции
Для класа определены следующие методы:
    return_oe_map(self) - возвращает отформотированую строку с карточкой товара
    oe_issue(self, set_owner) - осуществляет выдачу товара со склада подразделению
    где:
        set_owner - наименование подразделения
    oe_validate(oe_dict) - статический метод валидирует словарь содержащий параметры товара
    где:
        oe_dict - словарь содержащий параметры товара
    oe_valdate_numbers(num_str) - статический метод валидирует возможность конвертации строки в число и возвращает
    конвертированое число либо -1 в случае не возможности конвертации
    где:
        num_str - строка с цифрами
"""
class OfficeEquipment(Store): # Обьявляем клас потомок Store
    oe_name = '' # Инициализируем имя единицы оргтехники
    oe_model = '' # Инициализируем модель единицы оргтехники
    oe_serial_number = 0 # Инициализируем серийный номер единицы оргтехники
    oe_warranty = 0 # Инициализируем срок гарантии единицы оргтехники
    oe_type = '' # Инициализируем тип единицы оргтехники
    oe_qty = 0 # Инициализируем количество единицы оргтехники
    oe_date_in = '' # Инициализируем дату покупки и поступления на склад единицы оргтехники
    oe_price = 0 # Инициализируем стоимость единицы оргтехники
    oe_owner = '' # Инициализируем наименование подразделения для выдачи товара со склада
    oe_on_store = False # Инициалищируем флаг наличия товара на складе
    oe_id = 0 # Уникальный идентификатор товара на складе

    @staticmethod
    def oe_validate(oe_dict): # Обьявляем статический метод
        # Проверка наличия обязательных параметров товара: Производитель, модель, цена, количество, срок гарантии
        # дата поступления на склад, в случае если все валидировано возвращаем Ok, в противном случае строку с
        # c сущностью обьекта не прошедшего валидацию
        if oe_dict['Vendor'] == '':
            return f'производитель'
        if oe_dict['Model'] == '':
            return f'модель'
        if oe_dict['Price'] == -1:
            return f'Cтоимость должна быть числом больше нуля и '
        if oe_dict['qty'] == -1:
            return f'Количество должно быть числом больше нуля, и '
        if oe_dict['Warranty'] == '':
            return f'срок гарантии производителя'
        if oe_dict['date_in'] == '':
            return f'дата поступления на склад'
        return 'Ok'

    @staticmethod
    def oe_valdate_numbers(num_str): # Обьявляем статический метод
        try: # Если получаеться преобразовать строку в число
            t_num = int(num_str) # преобразуем строку в число
        except ValueError: # Если строку нельзя преобразовать в число
            return -1 # Возвращаем -1

        return t_num # Возвращаем число

    def return_oe_map(self): # Обьявляем метод класа для наследования класами потомками
        #Возвращаем отформатированую строку базовой карточки товара
        return f'Еденица оргтезники типа {self.oe_type}:\n' \
               f'{self.oe_name} {self.oe_model} в количестве: {self.oe_qty}\n' \
               f'Дата поступления на склад {self.store_name}: {self.oe_date_in}\n' \
               f'Серийный номер {self.oe_serial_number}\tЗакупочная цена {self.oe_price}\n' \
               f'Уникальный идентификатор: {self.oe_id}\n'

    def oe_issue(self, set_owner): # Обьявляем метод класа для наследования класами потомками
        if Store.goods_qty > 0 and self.oe_on_store: # Если товара на складе и соответсвует данному обьекту
            Store.goods_qty -= 1  # Уменьшаем количество товара на складе на 1
            self.oe_owner = set_owner  # Получаем наименование подразделения для передачи товара
            self.oe_qty -= 1 # Уменьшаем единицу оргтехники обькта на 1
            if self.oe_qty == 0: # Если количество единицы оргтехники для обькта равно 0
                self.oe_on_store = False # Выключаем флаг наличия товара на складе
            # Возвращаем какой товар и кому передан
            return f'Товар {self.oe_name} {self.oe_model} выдан подразделению: {self.oe_owner}'
        else: # если товар есть на складе
            if Store.goods_qty > 0 and not self.oe_on_store:
                return f'Данная оргтехника {self.oe_name} {self.oe_model} уже выдана подразделению:\n' \
                       f'{self.oe_owner}\n'
            else: # Если товара больше нет
                return f'Товара больше нет на складе!' # возвращаем предупреждение
"""
Клас Printers являеться потомком классом OfficeEquipment и предназначен для создания обьектов типа принтер
Для класа определены следующие атрибуты:
    printer_type - тип принтера (цветной, чернобелый)
    print_speed - скорость печати в страницах в минуту
Для класа определены следующие методы:
    __init__(self, prn_dict) - метод выполняет инициализацию данных для карточки товара при создании обьекта
    где:
        prn_dict - словарь с данными для карточки товара принтера используемый при инициализации обьекта
    __str__(self) - метод предназначен для перегрузки вывода карточки товара при выводи на экран обьекта
"""
class Printers(OfficeEquipment): #Обьявляем клас потомок OfficeEquipment
    printer_type = '' # Инициализируем тип принтера
    print_speed = 0 # Инициализируем скорость печати принтера в страницах в минуту

    def __init__(self, prn_dict): # Обьявляем метод класа
        self.oe_name = prn_dict['Vendor'] # Задаем из словаря имя принтера
        self.oe_model = prn_dict['Model'] # Задаем из словаря модель принтера
        self.oe_warranty = prn_dict['Warranty'] # Задаем из словаря срок гарантии принтера
        self.oe_serial_number = prn_dict['SerialNum'] # Задаем из словаря серийный номер принтера
        self.oe_price = prn_dict['Price'] # Задаем из словаря стоимость принтера
        self.oe_date_in = prn_dict['date_in'] # Задаем из словаря дату закупки и поступления на склад принтера
        self.oe_type = 'printer' # Задаем тип единицы оргтехники (принтер)
        self.oe_qty = prn_dict['qty'] # Задаем количество принтеро данной модели
        self.printer_type = prn_dict['Type'] # Задаем из словаря тип принтера (цветной, чернобелый)
        self.print_speed = prn_dict['Print_Speed'] # Задаем из словаря скорость печати принтера в страницах в минуту
        self.store_name = super().store_name # Задаем наименование склада для обьекта
        # Увеличиваем глабальную переменую класа Store c общим количеством товара на oe_qty
        Store.goods_qty += self.oe_qty
        self.oe_on_store = True # Устанавливаем флаг наличия на складе
        OfficeEquipment.oe_id += 1
        self.oe_id = OfficeEquipment.oe_id

    def __str__(self): # Обьявляем метод класа
        # Перегружаем вывод обьекта на экран, добавлением к форматированой строке карточки товара определеной
        # в класе родителе, строкой с дополнительными характеристиками для класа принтер
        return self.return_oe_map() + f'\nДополнительные характеристики товара:\n' \
               f'Тип принтера: {self.printer_type}\tСкорость печати: {self.print_speed} стр./мин.\n'
"""
Клас Scaners являеться потомком классом OfficeEquipment и предназначен для создания обьектов типа сканер
Для класа определены следующие атрибуты:
    scaner_type - тип сканера (цветной, чернобелый)
    scaner_resolution - максимальное разрешение изображения при сканировании в dpi
Для класа определены следующие методы:
    __init__(self, scan_dict) - метод выполняет инициализацию данных для карточки товара при создании обьекта
    где:
        scan_dict - словарь с данными для карточки товара сканера используемый при инициализации обьекта
    __str__(self) - метод предназначен для перегрузки вывода карточки товара при выводи на экран обьекта
"""
class Scaners(OfficeEquipment):
    scaner_type = '' # Инициализируем тип сканера
    scaner_resolution = 0  # Инициализируем максимальное разрешение сканирования

    def __init__(self, scan_dict): # Обьявляем метод класа
        self.oe_name = scan_dict['Vendor'] # Задаем из словаря имя сканера
        self.oe_model = scan_dict['Model'] # Задаем из словаря модель сканера
        self.oe_warranty = scan_dict['Warranty'] # Задаем из словаря срок гарантии сканера
        self.oe_serial_number = scan_dict['SerialNum'] # Задаем из словаря серийный номер сканера
        self.oe_price = scan_dict['Price'] # Задаем из словаря стоимость сканера
        self.oe_date_in = scan_dict['date_in'] # Задаем из словаря дату закупки и поступления на склад сканера
        self.oe_type = 'scaner' #Задаем тип единицы оргтехники (сканер)
        self.oe_qty = scan_dict['qty'] # Задаем количество сканеров данной модели
        self.scaner_type = scan_dict['Type'] # Задаем из словаря тип сканера (цветной, чернобелый)
        self.scaner_resolution = scan_dict['Scan_Res'] # Задаем из словаря максимальное разрешение сканера
        self.store_name = super().store_name  # Задаем наименование склада для обьекта
        # Увеличиваем глабальную переменую класа Store c общим количеством товара на oe_qty
        Store.goods_qty += self.oe_qty
        self.oe_on_store = True  # Устанавливаем флаг наличия на складе
        OfficeEquipment.oe_id += 1
        self.oe_id = OfficeEquipment.oe_id

    def __str__(self): # Обьявляем метод класа
        # Перегружаем вывод обьекта на экран, добавлением к форматированой строке карточки товара определеной
        # в класе родителе, строкой с дополнительными характеристиками для класа сканер
        return self.return_oe_map() + f'\nДополнительные характеристики товара:\n' \
               f'Тип сканера: {self.scaner_type}\tМакс. разрешение: {self.scaner_resolution} стр./мин.\n'
"""
Клас Copiers являеться потомком классом OfficeEquipment и предназначен для создания обьектов типа копир
Для класа определены следующие атрибуты:
    copier_type - тип копира (цветной, чернобелый)
    copy_speed - скорость копирования в страницах в минуту
Для класа определены следующие методы:
    __init__(self, copy_dict) - метод выполняет инициализацию данных для карточки товара при создании обьекта
    где:
        copy_dict - словарь с данными для карточки товара копира используемый при инициализации обьекта
    __str__(self) - метод предназначен для перегрузки вывода карточки товара при выводи на экран обьекта
    __del__(self) - метод предназначен для оповещении о выдаче товара со склада и уменьшении количество товара
    на складе при удалении обьекта
"""
class Copiers(OfficeEquipment):
    copier_type = ''
    copy_speed = 0

    def __init__(self, copy_dict): # Обьявляем метод класа
        self.oe_name = copy_dict['Vendor'] # Задаем из словаря имя копира
        self.oe_model = copy_dict['Model'] # Задаем из словаря модель копира
        self.oe_warranty = copy_dict['Warranty'] # Задаем из словаря срок гарантийной поддержки копира
        self.oe_serial_number = copy_dict['SerialNum'] # Задаем из словаря серийный номер копира
        self.oe_price = copy_dict['Price'] # Задаем из словаря стоимость копира
        self.oe_date_in = copy_dict['date_in'] # Задаем из словаря дату закупки и поступление на склад копира
        self.oe_type = 'copier' #Задаем тип единицы оргтехники (копир)
        self.oe_qty = copy_dict['qty'] # Задаем количество копира данной модели
        self.copier_type = copy_dict['Type'] # Задаем из словаря тип копира (цвтной, чернобелый)
        self.copy_speed = copy_dict['Copy_Speed'] # Задаем из словаря скорость печати копира
        self.store_name = super().store_name # Задаем наименование склада для обьекта
        # Увеличиваем глабальную переменую класа Store c общим количеством товара на oe_qty
        Store.goods_qty += self.oe_qty
        self.oe_on_store = True  # Устанавливаем флаг наличия на складе
        OfficeEquipment.oe_id += 1
        self.oe_id = OfficeEquipment.oe_id

    def __str__(self): # Обьявляем метод класа
        # Перегружаем вывод обьекта на экран, добавлением к форматированой строке карточки товара определеной
        # в класе родителе, строкой с дополнительными характеристиками для класа копир
        return self.return_oe_map() + f'\nДополнительные характеристики товара:\n' \
               f'Тип копира: {self.copier_type}\tСкорось копирования: {self.copy_speed} стр./мин.\n'

###############################################################################################################
# Основное тело программы
###############################################################################################################

print('Программа работы со складом оргтехники.\n')
# Инициализируем словарь содержащий параметры товара
oe_spec_dict = {'Vendor': '', 'Model': '', 'Price': 0, 'qty': 0, 'Print_Speed': '',
                     'Scan_Res': '', 'Copy_Speed': '', 'Type': '', 'SerialNum': '',
                     'Warranty': '', 'date_in': ''}

printer_obj_list = [] # Инициализируем список обьектов класа Printers
scaner_obj_list = [] # Инициализируем список обьектов класа Scaners
copier_obj_list = [] # Инициализируем список обьектов класа Copiers

oe_type_list = ['принтер', 'сканер', 'копир'] # Инициализируем список типов оргтехники
oe_type = '' # Инициализируем выбранный тип оргтехники
type_str = '' # Инициализируем переменную для работы с выбором типа оргтехники

while True:  # Открываем бесконечный цикл ввода обрудования на склад
    print(f'Внесение данных по оргтехнике на склад.\n'
          f'\tДля выхода нажмите q!')
    while True: # Открываем вложеный бесконечный цикд выбора типа оргтехники
        # Получаем выбранный тип оборудования
        type_str = input(f'Выбирите тип вводимого оборудования:\n'
                        f'\tПринтер - нажмите 0\n'
                        f'\tСканер - нажмите 1\n'
                        f'\tКопир - нажмите 2\n')
        if type_str == 'q': # Если пользователь ввел q то выходим из вложеного цикла
            break
        else: # В протвном случае
            # Проверяем что было введено число
            if OfficeEquipment.oe_valdate_numbers(type_str) != -1: # Если введено число
                oe_type = oe_type_list[int(type_str)] # Задаем тип оборудования для ввода
                break # и выходим из вложеного цикла

    if type_str == 'q': # Если при выборе типа товара пользователб нажал q то выходим из цикла ввода оборудования
        break
    # Получаем наименование производителя
    oe_spec_dict['Vendor'] = input(f'Введите наименование производителя {oe_type}а: ')
    if oe_spec_dict['Vendor'] == 'q': # Если пользователь ввел q выходим из цикла
        break
    # Получаем модель
    oe_spec_dict['Model'] = input(f'Введите модель {oe_type}а: ')
    if oe_spec_dict['Model'] == 'q': # Если пользователь ввел q выходим из цикла
        break
    # Получаем стоимость
    price_str = input(f'Введите стоимость {oe_type}а: ')
    if price_str == 'q': # Если пользователь ввел q выходим из цикла
        break
    else: # в противном случае производим валидацию введенной строки на возможность конвертации в число и само число
        oe_spec_dict['Price'] = OfficeEquipment.oe_valdate_numbers(price_str)
    # Получаем количество
    qty_str = input(f'Введите количество {oe_type}ов: ')
    if qty_str == 'q': # Если пользователь ввел q выходим из цикла
        break
    else: # в противном случае производим валидацию введенной строки на возможность конвертации в число и само число
        oe_spec_dict['qty'] = OfficeEquipment.oe_valdate_numbers(qty_str)
    # Получаем тип
    oe_spec_dict['Type'] = input(f'Введите тип {oe_type}а (ч/б, цветной): ')
    if oe_spec_dict['Type'] == 'q': # Если пользователь ввел q выходим из цикла
        break
    # Получаем стоимость серийный номер
    oe_spec_dict['SerialNum'] = input(f'Введите серийный номер {oe_type}а: ')
    if oe_spec_dict['SerialNum'] == 'q': # Если пользователь ввел q выходим из цикла
        break
    # Получаем срок гарантийной поддержки в годах
    oe_spec_dict['Warranty'] = input(f'Введите срок гарантии {oe_type}а от производителя: ')
    if oe_spec_dict['Warranty'] == 'q': # Если пользователь ввел q выходим из цикла
        break
    # Получаем дату поступления на склад
    oe_spec_dict['date_in'] = input(f'Введите дату (формат дд:мм:гггг) поступления на склад {oe_type}а: ')
    if oe_spec_dict['date_in'] == 'q': # Если пользователь ввел q выходим из цикла
        break
    # для выброного типа оборудования принтер
    if oe_type == 'принтер':
        # Получаем скорость печати принтера
        oe_spec_dict['Print_Speed'] = input('Введите скорость печати принтера (стр./мин): ')
        if oe_spec_dict['Print_Speed'] == 'q': # Если пользователь ввел q выходим из цикла
            break
        result = OfficeEquipment.oe_validate(oe_spec_dict) # Производим валидацию обязательных параметров
        if result == 'Ok': # Если валидировано
            print('Параметры принтера успешно валидированы!\n')
            # Создаем обьект класа принтер и добавляем обьект в список обьектов этого класа
            printer_obj_list.append(Printers(oe_spec_dict))
            print('Данный принтер поступил на склад!')
        else: # если не валидировано выводим сообщение и не создаем обьект
            print(f'Параметры принтера не валидированы!\n'
                  f'Параметр {result} не может быть пустым!')
    # для выброного типа оборудования сканер
    elif oe_type == 'сканер':
        # Получаем максимальное разрешение сканированния
        oe_spec_dict['Scan_Res'] = input('Введите максимальное разрешение сканирования сканера (dpi): ')
        if oe_spec_dict['Scan_Res'] == 'q': # Если пользователь ввел q выходим из цикла
            break
        result = OfficeEquipment.oe_validate(oe_spec_dict) # Производим валидацию обязательных параметров
        if result == 'Ok': # Если валидировано
            print('Параметры сканера успешно валидированы!\n')
            # Создаем обьект класа сканер и добавляем обьект в список обьектов этого класа
            scaner_obj_list.append(Scaners(oe_spec_dict))
            print('Данный сканер поступил на склад!')
        else:  # если не валидировано выводим сообщение и не создаем обьект
            print(f'Параметры сканера не валидированы!\n'
                  f'Параметр {result} не может быть пустым!')
    # для выброного типа оборудования копир
    elif oe_type == 'копир':
        # Получаем скорость печати копий
        oe_spec_dict['Copy_Speed'] = input('Введите скорость копирования копира (стр./мин): ')
        if oe_spec_dict['Copy_Speed'] == 'q': # Если пользователь ввел q выходим из цикла
            break
        result = OfficeEquipment.oe_validate(oe_spec_dict) # Производим валидацию обязательных параметров
        if result == 'Ok': # Если валидировано
            print('Параметры копира успешно валидированы!\n')
            # Создаем обьект класа копир и добавляем обьект в список обьектов этого класа
            copier_obj_list.append(Copiers(oe_spec_dict))
            print(f'Данный копир поступил на склад!')
        else: # если не валидировано выводим сообщение и не создаем обьект
            print(f'Параметры копира не валидированы!\n'
                  f'Параметр {result} не может быть пустым!')

###############################################################################################################
# Переходим к работе с товаром на складе

# Если не введен ни один товар выходим из программы
if len(printer_obj_list) == 0 and len(scaner_obj_list) == 0 and len(copier_obj_list) == 0:
    print(f'Вы не ввли не одногой единицы оргтехники. Склад пуст!\n'
          f'Программа завершена!')
    exit()

# Если на складе есть товар
while True: # Открываем бесконечный цикл работы с товаром на складе
    #Получаем выбранную команду по раблте с товаром
    selected_cmd = input(f'Выбирите пункт из меню ниже:\n'
                         f'\tВывести принтеров на складе - Нажмите 1\n'
                         f'\tВывести сканеров на складе - Нажмите 2\n'
                         f'\tВывести копиров на складе - Нажмите 3\n'
                         f'\tПередать товар со склада в подразделение - Нажмите 4\n'
                         f'\tВыйти из програмы - Нажмите q\n')

    if selected_cmd == '1': # Если выбран вывод принтеров имеющихся на складе
        if len(printer_obj_list) > 0: # Если список обьектов принтеров не пустой
            for item in printer_obj_list:
                print(item) # Выводим все обьекты класа принтер
        else: # Если пустой выводим сообщение
            print('Принтеров на складе нет!')
    elif selected_cmd == '2': # Если выбран вывод сканеров имеющихся на складе
        if len(scaner_obj_list) > 0: # Если список обьектов сканеров не пустой
            for item in scaner_obj_list:
                print(item) # Выводим все обьекты класа сканер
        else: # Если пустой выводим сообщение
            print('Сканеров на складе нет!')
    elif selected_cmd == '3': # Если выбран вывод копиров имеющихся на складе
        if len(copier_obj_list) > 0: # Если список обьектов копиров не пустой
            for item in copier_obj_list:
                print(item) # Выводим все обьекты класа сканер
        else: # Если пустой выводим сообщение
            print('Копиров на складе нет!')
    elif selected_cmd == '4': # Если выбран режим выдачи товаров подразделениям
        # Получаем уникальный идентификатор товара. Увидеть данный параметр можно при выводе списка соответствующего
        # оборудования используя команды 1, 2, 3
        good_id = int(input('Ведите уникальный идентификатор товара: '))
        # Получаем наименование подразделения
        org_unit_name = input('Введите подразделение для передачи товара: ')
        # Получаем тип оборудования
        type_str = input(f'Выбирите тип оборудования из списка ниже:\n'
                         f'\tПринтер - Нажмите p\n'
                         f'\tСканер - Нажмите s\n'
                         f'\tКопир - Нажмите к\n')
        id_found = False # Инициализируем флаг находжения уникального идентификатора
        if type_str == 'p': # Если выбран тип оборудования принтер
            for item in printer_obj_list: # Для каждого обьекта класа принтер из списка
                if item.oe_id == good_id: # Если нашли обьект с соответствующим уникальным идентифкатором
                    id_found = True # Включаем флаг нахождения идетификатора
                    if item.oe_qty > 0: # Если количество данного оборудования на складе > 0
                        print(item.oe_issue(org_unit_name)) # Выдаем оборудование подразделению
                        if item.oe_qty == 0: # Если после выдачи количество оборудования равно 0
                            printer_obj_list.remove(item) # Удаляем обьект этого класа со склада
                        break # Выходим из цикла
        elif type_str == 's': # Если выбран тип оборудования сканер
            for item in scaner_obj_list: # Для каждого обьекта класа сканер из списка
                if item.oe_id == good_id: # Если нашли обьект с соответствующим уникальным идентифкатором
                    id_found = True # Включаем флаг нахождения идетификатора
                    if item.oe_qty > 0: # Если количество данного оборудования на складе > 0
                        print(item.oe_issue(org_unit_name)) # Выдаем оборудование подразделению
                        if item.oe_qty == 0: # Если после выдачи количество оборудования равно 0
                            scaner_obj_list.remove(item) # Удаляем обьект этого класа со склада
                        break # Выходим из цикла
        elif type_str == 'k': # Если выбран тип оборудования копир
            for item in copier_obj_list: # Для каждого обьекта класа копир из списка
                if item.oe_id == good_id: # Если нашли обьект с соответствующим уникальным идентифкатором
                    id_found = True # Включаем флаг нахождения идетификатора
                    if item.oe_qty > 0: # Если количество данного оборудования на складе > 0
                        print(item.oe_issue(org_unit_name)) # Выдаем оборудование подразделению
                        if item.oe_qty == 0: # Если после выдачи количество оборудования равно 0
                            copier_obj_list.remove(item) # Удаляем обьект этого класа со склада
                        break # Выходим из цикла

        if not id_found: # Если среди обьектов всех класов не нашли уникальный идентификатор
            # Выводим сообщение и ничего не делаем
            print('Уникальный идентификатор товара не найден!')
    elif selected_cmd == 'q': # Если нажали q то завершаем программу
        print('Программа завершена!')
        break





