# Продолжить работу над первым заданием. Разработать методы, отвечающие за приём оргтехники на склад и передачу в
# определенное подразделение компании. Для хранения данных о наименовании и количестве единиц оргтехники,
# а также других данных, можно использовать любую подходящую структуру, например словарь.
"""
Клас Store являеться базовым родительским классом для класса оргтехники OfficeEquipment
Клас имеет следующие атрибуты:
    store_name - наименование склада
    goods_qty - общее количество товаров на складе
Клас имеет следующие методы:
    return_on_stor_qty - возвращает общее количество товара на складе
"""
class Store: # Обьявляем клас
    store_name = 'Склад №15' # Инициализируем глобальную переменую имени склада
    goods_qty = 0 # Инициализируем глобальную переменую количества товара на складе

    def return_on_stor_qty(self): # Обьявляем метод класа
        return goods_qty # возвращаем количество товара на складе
"""
Клас OfficeEquipment являеться базовым родительским классом для класов Printers, Scaners, Copiers
Для класа определены следующие атрибуты:
    oe_name - Наименование оргтехники
    oe_model - Модель оргтехники
    oe_serial_number - Серийный номер оргтехники
    oe_warranty - Срок гарантийной поддержки оргтехники
    oe_type - Тип оргтехники (принтер, сканер, копир)
    oe_qty - Количество едеиниц оргтехники
    oe_date_in - дата приобретения и поступления на склад
    oe_price - закупочная стоимость
    oe_owner - подразделение владелец товара для передачи со склада
    oe_on_store - флаг наличия на складе
Для класа определены следующие методы:
    return_oe_map(self) - возвращает отформотированую строку с карточкой товара
    oe_issue(self, set_owner) - осуществляет выдачу товара со склада подразделению
    где:
        set_owner - наименование подразделения
"""
class OfficeEquipment(Store): # Обьявляем клас потомок Store
    oe_name = '' # Инициализируем имя единицы оргтехники
    oe_model = '' # Инициализируем модель единицы оргтехники
    oe_serial_number = 0 # Инициализируем серийный номер единицы оргтехники
    oe_warranty = 0 # Инициализируем срок гарантии единицы оргтехники
    oe_type = '' # Инициализируем тип единицы оргтехники
    oe_qty = 0 # Инициализируем количество единицы оргтехники
    oe_date_in = '' # Инициализируем дату покупки и поступления на склад единицы оргтехники
    oe_price = 0 # Инициализируем стоимость единицы оргтехники
    oe_owner = '' # Инициализируем наименование подразделения для выдачи товара со склада
    oe_on_store = False # Инициалищируем флаг наличия товара на складе

    def return_oe_map(self): # Обьявляем метод класа для наследования класами потомками
        #Возвращаем отформатированую строку базовой карточки товара
        return f'Еденица оргтезники типа {self.oe_type}:\n' \
               f'{self.oe_name} {self.oe_model} в количестве: {self.oe_qty}\n' \
               f'Дата поступления на склад {self.store_name}: {self.oe_date_in}\n' \
               f'Серийный номер {self.oe_serial_number}\tЗакупочная цена {self.oe_price}\n'

    def oe_issue(self, set_owner): # Обьявляем метод класа для наследования класами потомками
        if Store.goods_qty > 0 and self.oe_on_store: # Если товара на складе и соответсвует данному обьекту
            Store.goods_qty -= 1  # Уменьшаем количество товара на складе на 1
            self.oe_owner = set_owner  # Получаем наименование подразделения для передачи товара
            self.oe_on_store = False # Выключаем флаг наличия товара на складе
            # Возвращаем какой товар и кому передан
            return f'Товар {self.oe_name} {self.oe_model} выдан подразделению: {self.oe_owner}'
        else: # если товар есть на складе
            if Store.goods_qty > 0 and not self.oe_on_store:
                return f'Данная оргтехника {self.oe_name} {self.oe_model} уже выдана подразделению:\n' \
                       f'{self.oe_owner}\n'
            else:
                return f'Товара больше нет на складе!' # возвращаем предупреждение
"""
Клас Printers являеться потомком классом OfficeEquipment и предназначен для создания обьектов типа принтер
Для класа определены следующие атрибуты:
    printer_type - тип принтера (цветной, чернобелый)
    print_speed - скорость печати в страницах в минуту
Для класа определены следующие методы:
    __init__(self, prn_dict) - метод выполняет инициализацию данных для карточки товара при создании обьекта
    где:
        prn_dict - словарь с данными для карточки товара принтера используемый при инициализации обьекта
    __str__(self) - метод предназначен для перегрузки вывода карточки товара при выводи на экран обьекта
"""
class Printers(OfficeEquipment): #Обьявляем клас потомок OfficeEquipment
    printer_type = '' # Инициализируем тип принтера
    print_speed = 0 # Инициализируем скорость печати принтера в страницах в минуту

    def __init__(self, prn_dict): # Обьявляем метод класа
        self.oe_name = prn_dict['Vendor'] # Задаем из словаря имя принтера
        self.oe_model = prn_dict['Model'] # Задаем из словаря модель принтера
        self.oe_warranty = prn_dict['Warranty'] # Задаем из словаря срок гарантии принтера
        self.oe_serial_number = prn_dict['SerialNum'] # Задаем из словаря серийный номер принтера
        self.oe_price = prn_dict['Price'] # Задаем из словаря стоимость принтера
        self.oe_date_in = prn_dict['date_in'] # Задаем из словаря дату закупки и поступления на склад принтера
        self.oe_type = 'printer' # Задаем тип единицы оргтехники (принтер)
        self.oe_qty = 1 # Задаем количество принтеро данной модели
        self.printer_type = prn_dict['Type'] # Задаем из словаря тип принтера (цветной, чернобелый)
        self.print_speed = prn_dict['Print_Speed'] # Задаем из словаря скорость печати принтера в страницах в минуту
        self.store_name = super().store_name # Задаем наименование склада для обьекта
        Store.goods_qty += 1 # Увеличиваем глабальную переменую класа Store c общим количеством товара нв 1
        self.oe_on_store = True # Устанавливаем флаг наличия на складе

    def __str__(self): # Обьявляем метод класа
        # Перегружаем вывод обьекта на экран, добавлением к форматированой строке карточки товара определеной
        # в класе родителе, строкой с дополнительными характеристиками для класа принтер
        return self.return_oe_map() + f'\nДополнительные характеристики товара:\n' \
               f'Тип принтера: {self.printer_type}\tСкорость печати: {self.print_speed} стр./мин.\n'
"""
Клас Scaners являеться потомком классом OfficeEquipment и предназначен для создания обьектов типа сканер
Для класа определены следующие атрибуты:
    scaner_type - тип сканера (цветной, чернобелый)
    scaner_resolution - максимальное разрешение изображения при сканировании в dpi
Для класа определены следующие методы:
    __init__(self, scan_dict) - метод выполняет инициализацию данных для карточки товара при создании обьекта
    где:
        scan_dict - словарь с данными для карточки товара сканера используемый при инициализации обьекта
    __str__(self) - метод предназначен для перегрузки вывода карточки товара при выводи на экран обьекта
"""
class Scaners(OfficeEquipment):
    scaner_type = '' # Инициализируем тип сканера
    scaner_resolution = 0  # Инициализируем максимальное разрешение сканирования

    def __init__(self, scan_dict): # Обьявляем метод класа
        self.oe_name = scan_dict['Vendor'] # Задаем из словаря имя сканера
        self.oe_model = scan_dict['Model'] # Задаем из словаря модель сканера
        self.oe_warranty = scan_dict['Warranty'] # Задаем из словаря срок гарантии сканера
        self.oe_serial_number = scan_dict['SerialNum'] # Задаем из словаря серийный номер сканера
        self.oe_price = scan_dict['Price'] # Задаем из словаря стоимость сканера
        self.oe_date_in = scan_dict['date_in'] # Задаем из словаря дату закупки и поступления на склад сканера
        self.oe_type = 'scaner' #Задаем тип единицы оргтехники (сканер)
        self.oe_qty = 1 # Задаем количество сканеров данной модели
        self.scaner_type = scan_dict['Type'] # Задаем из словаря тип сканера (цветной, чернобелый)
        self.scaner_resolution = scan_dict['Scan_Res'] # Задаем из словаря максимальное разрешение сканера
        self.store_name = super().store_name  # Задаем наименование склада для обьекта
        Store.goods_qty += 1 # Увеличиваем глабальную переменую класа Store c общим количеством товара нв 1
        self.oe_on_store = True  # Устанавливаем флаг наличия на складе

    def __str__(self): # Обьявляем метод класа
        # Перегружаем вывод обьекта на экран, добавлением к форматированой строке карточки товара определеной
        # в класе родителе, строкой с дополнительными характеристиками для класа сканер
        return self.return_oe_map() + f'\nДополнительные характеристики товара:\n' \
               f'Тип сканера: {self.scaner_type}\tМакс. разрешение: {self.scaner_resolution} стр./мин.\n'
"""
Клас Copiers являеться потомком классом OfficeEquipment и предназначен для создания обьектов типа копир
Для класа определены следующие атрибуты:
    copier_type - тип копира (цветной, чернобелый)
    copy_speed - скорость копирования в страницах в минуту
Для класа определены следующие методы:
    __init__(self, copy_dict) - метод выполняет инициализацию данных для карточки товара при создании обьекта
    где:
        copy_dict - словарь с данными для карточки товара копира используемый при инициализации обьекта
    __str__(self) - метод предназначен для перегрузки вывода карточки товара при выводи на экран обьекта
    __del__(self) - метод предназначен для оповещении о выдаче товара со склада и уменьшении количество товара
    на складе при удалении обьекта
"""
class Copiers(OfficeEquipment):
    copier_type = ''
    copy_speed = 0

    def __init__(self, copy_dict): # Обьявляем метод класа
        self.oe_name = copy_dict['Vendor'] # Задаем из словаря имя копира
        self.oe_model = copy_dict['Model'] # Задаем из словаря модель копира
        self.oe_warranty = copy_dict['Warranty'] # Задаем из словаря срок гарантийной поддержки копира
        self.oe_serial_number = copy_dict['SerialNum'] # Задаем из словаря серийный номер копира
        self.oe_price = copy_dict['Price'] # Задаем из словаря стоимость копира
        self.oe_date_in = copy_dict['date_in'] # Задаем из словаря дату закупки и поступление на склад копира
        self.oe_type = 'copier' #Задаем тип единицы оргтехники (копир)
        self.oe_qty = 1 # Задаем количество копира данной модели
        self.copier_type = copy_dict['Type'] # Задаем из словаря тип копира (цвтной, чернобелый)
        self.copy_speed = copy_dict['Copy_Speed'] # Задаем из словаря скорость печати копира
        self.store_name = super().store_name # Задаем наименование склада для обьекта
        Store.goods_qty += 1 # Увеличиваем глабальную переменую класа Store c общим количеством товара нв 1
        self.oe_on_store = True  # Устанавливаем флаг наличия на складе

    def __str__(self): # Обьявляем метод класа
        # Перегружаем вывод обьекта на экран, добавлением к форматированой строке карточки товара определеной
        # в класе родителе, строкой с дополнительными характеристиками для класа копир
        return self.return_oe_map() + f'\nДополнительные характеристики товара:\n' \
               f'Тип копира: {self.copier_type}\tСкорось копирования: {self.copy_speed} стр./мин.\n'

###############################################################################################################
# Основное тело программы
###############################################################################################################

# Инициализируем словари содержащие данные для карточки товара для принеров, сканера и копира
printer_spec_dict1 = {'Vendor': 'HP inc.', 'Model': 'LaserJet', 'Price': 45670, 'Print_Speed': 30, 'Type': 'B&W',
                     'SerialNum': 23434567, 'Warranty': 1, 'date_in': '10.09.2021'}
printer_spec_dict2 = {'Vendor': 'HP inc.', 'Model': 'IncJet', 'Price': 25640, 'Print_Speed': 10, 'Type': 'color',
                     'SerialNum': 98456721, 'Warranty': 1, 'date_in': '22.10.2021'}

scaner_spec_dict1 = {'Vendor': 'HP inc.', 'Model': 'ScanJet', 'Price': 12400, 'Scan_Res': 1200, 'Type': 'color',
                     'SerialNum': 56745634, 'Warranty': 1, 'date_in': '26.08.2021'}

copier_spec_dict1 = {'Vendor': 'Xerox', 'Model': '4321', 'Price': 125400, 'Copy_Speed': 240, 'Type': 'color',
                     'SerialNum': 452309811093, 'Warranty': 2, 'date_in': '15.11.2021'}

p1 = Printers(printer_spec_dict1) # Создаем первый обьект класа принтер
p2 = Printers(printer_spec_dict2) # Создаем второй обьект класа принтер

s1 = Scaners(scaner_spec_dict1) # Создаем обьект класа сканер
c1 = Copiers(copier_spec_dict1) # Создаем обьект класа копир

#Выводим общее количество товара на складе
print(f'Количество товара на складе:  {Store.goods_qty}\n')

# Выполняем передачу оргтехники в подразделения
print(p1.oe_issue('Департамент ИТ'))
# Пытаемся повторно выдать ту же оргтехнику
print(p1.oe_issue('Департамент ИТ'))
# Выполняем передачу оргтехники в подразделения
print(p2.oe_issue('Департамент сопровождения'))
print(s1.oe_issue('Департамент финансов'))
print(c1.oe_issue('Департамент АХД'))

# Выводим общее количество товара на складе
print(f'Количество товара на складе:  {Store.goods_qty}\n')

# Пытаемся выдать товар при пустом складе
print(c1.oe_issue('Департамент ИТ'))