# Реализовать проект «Операции с комплексными числами». Создайте класс «Комплексное число», реализуйте перегрузку
# методов сложения и умножения комплексных чисел. Проверьте работу проекта, создав экземпляры класса
# (комплексные числа) и выполнив сложение и умножение созданных экземпляров. Проверьте корректность
# полученного результата.

"""
Клас ComplexNum предназначени для создания обьектов комплексных чисел класа и выполнения над ними арефметических
операций.
Для класа определены следующие аргументы
    re_z - действительная часть комплексного числа
    im_z - мнимая часть комплексного числа
    i - мнимая единица
Для класа определены следующие методы:
    __init__(self, get_re, get_im) - Инициализация обьекта класа при его создании
    где:
        get_re - переданое значение действительной части
        get_im - переданое значение мнимой части
    __add__(self, other) - метод перегрузки сложения двух обьектов класа
    где:
        other - второй обьект класа
    __mul__(self, other) - - метод перегрузки произведения двух обьектов класа
   где:
        other - второй обьект класа
   __str__(self) - перегрузка вывода обьектов класа на экран
"""
class ComplexNum:
    re_z = None # действительная часть комплексного числа
    im_z = None # мнимая часть комплексного числа
    i = '' # мнимая единица

    def __init__(self, get_re, get_im): # Обьявляем метод инициализирующий обьект класа при его создании
        self.re_z = get_re # Инициализируем действительную часть комплексного числа
        self.im_z = get_im # Инициализируем мнимую часть комплексного числа
        self.i = 'i' # Инициализируем мнимую единицу

    def __add__(self, other): # Обьявляем перегрузку сложения двух обьекта класа
        sum_re_z = self.re_z + other.re_z # Получаем сумму действительную части двух обьектов
        sum_im_z = self.im_z + other.im_z # # Получаем сумму мнимой части двух обьектов
        if sum_im_z < 0: # если сумма мнимой части < 0
            return f'{sum_re_z}{sum_im_z}{self.i}' # Возвращаем итоговую сумму двух обьктов
        else: # В противном случае
            return f'{sum_re_z}+{sum_im_z}{self.i}' # Возвращаем итоговую сумму двух обьктов

    def __mul__(self, other): # Обьявляем перегрузку произведения двух обьекта класа
        # Получаем сумму умножения действительной части первого обьекта на действительную и мнимую части
        # второго обьекта
        mul_rm_z = self.re_z * other.re_z + self.re_z * other.im_z
        # Получаем сумму умножения мнимой части первого обьекта на действительную и мнимую части
        # второго обьекта. -1 соответствует i в квадрате
        mul_im_z = self.im_z * other.re_z + self.im_z * other.im_z * -1
        if mul_im_z < 0: #если сумма умножение мнимой части < 0
            return f'{mul_rm_z}{mul_im_z}{self.i}' # Возвращаем итоговое произведение двух обьктов
        else: # В противном случае
            return f'{mul_rm_z}+{mul_im_z}{self.i}' # Возвращаем итоговое произведение двух обьктов

    def __str__(self):
        if self.im_z < 0:
            return f'{self.re_z}{self.im_z}{self.i}'
        else:
            return f'{self.re_z}+{self.im_z}{self.i}'

##########################################################################################################
#Основное тело программы
##########################################################################################################

cx1 = ComplexNum(1, 3)  # Создаем обьект класа для первого комплексного числа
cx2 = ComplexNum(4, -5) # Создаем обьект класа для второго комплексного числа
cx3 = ComplexNum(1, -1) # Создаем обьект класа для третьего комплексного числа
cx4 = ComplexNum(3, 6)  # Создаем обьект класа для четвертого комплексного числа

# Выводим на экран результат сложения первого и второго комплексного числа
print(f'Сумма двух комплексных чисел: {cx1} и {cx2} равно:\n'
      f'\t{cx1 + cx2}')
# Выводим на экран произведение третьего и четвертого комплексного числа
print(f'Произведение двух комплексных чисел: {cx3} и {cx4} равно:\n'
      f'\t{cx3 * cx4}')